// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(OpenBankingDbContext))]
    [Migration("20221104215225_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entities.ApiDiscoveryEndpoint", b =>
                {
                    b.Property<Guid>("ApiDiscoveryEndpointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApiEndpoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ApiResourceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApiDiscoveryEndpointId");

                    b.HasIndex("ApiResourceId");

                    b.ToTable("ApiDiscoveryEndpoints");
                });

            modelBuilder.Entity("Domain.Entities.ApiResource", b =>
                {
                    b.Property<Guid>("ApiResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApiFamilyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApiVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AuthorisationServerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("FamilyComplete")
                        .HasColumnType("bit");

                    b.HasKey("ApiResourceId");

                    b.HasIndex("AuthorisationServerId");

                    b.ToTable("ApiResources");
                });

            modelBuilder.Entity("Domain.Entities.AuthorisationServer", b =>
                {
                    b.Property<Guid>("AuthorisationServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AutoRegistrationSuported")
                        .HasColumnType("bit");

                    b.Property<string>("CustomerFriendlyDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerFriendlyLogoUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerFriendlyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeveloperPortalUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenIDDiscoveryDocument")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PayloadSigningCertLocationUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SupportsCiba")
                        .HasColumnType("bit");

                    b.Property<bool>("SupportsDCR")
                        .HasColumnType("bit");

                    b.Property<string>("TermsOfServiceUri")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorisationServerId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("AuthorisationServers");
                });

            modelBuilder.Entity("Domain.Entities.OrgDomainClaim", b =>
                {
                    b.Property<Guid>("OrgDomainClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorisationDomainName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegistrationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrgDomainClaimId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("OrgDomainClaims");
                });

            modelBuilder.Entity("Domain.Entities.OrgDomainRoleClaim", b =>
                {
                    b.Property<Guid>("OrgDomainRoleClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorisationDomain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegistrationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrgDomainRoleClaimId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("OrgDomainRoleClaims");
                });

            modelBuilder.Entity("Domain.Entities.Participant", b =>
                {
                    b.Property<Guid>("ParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyRegister")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryOfRegistration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LegalEntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganisationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentOrganisationReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegisteredName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParticipantId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("Domain.Entities.ApiDiscoveryEndpoint", b =>
                {
                    b.HasOne("Domain.Entities.ApiResource", "ApiResource")
                        .WithMany("ApiDiscoveryEndpoints")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("Domain.Entities.ApiResource", b =>
                {
                    b.HasOne("Domain.Entities.AuthorisationServer", "AuthorisationServer")
                        .WithMany("ApiResources")
                        .HasForeignKey("AuthorisationServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthorisationServer");
                });

            modelBuilder.Entity("Domain.Entities.AuthorisationServer", b =>
                {
                    b.HasOne("Domain.Entities.Participant", "Participant")
                        .WithMany("AuthorisationServers")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("Domain.Entities.OrgDomainClaim", b =>
                {
                    b.HasOne("Domain.Entities.Participant", "Participant")
                        .WithMany("OrgDomainClaims")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("Domain.Entities.OrgDomainRoleClaim", b =>
                {
                    b.HasOne("Domain.Entities.Participant", "Participant")
                        .WithMany("OrgDomainRoleClaims")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("Domain.Entities.ApiResource", b =>
                {
                    b.Navigation("ApiDiscoveryEndpoints");
                });

            modelBuilder.Entity("Domain.Entities.AuthorisationServer", b =>
                {
                    b.Navigation("ApiResources");
                });

            modelBuilder.Entity("Domain.Entities.Participant", b =>
                {
                    b.Navigation("AuthorisationServers");

                    b.Navigation("OrgDomainClaims");

                    b.Navigation("OrgDomainRoleClaims");
                });
#pragma warning restore 612, 618
        }
    }
}
